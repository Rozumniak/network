{"version":3,"sources":["Components/Chat/Chat.module.css","Components/Chat/Chat.jsx","Components/Chat/ChatContainer.jsx"],"names":["module","exports","ws","Messages","messages","userID","chatMessages","map","m","index","message","Message","props","isSentByCurrentUser","messageId","userId","authUserId","console","log","className","cn","st","messageContainer","justifyEnd","messageBox","backgroundBlue","src","photo","userName","justifyStart","backgroundLight","messageText","colorDark","InputMessageForm","useState","setMessage","sendMessage","send","s","form","input","placeholder","value","onKeyPress","event","key","onChange","e","currentTarget","sendButton","onClick","Chat","newMessages","setMessages","ENDPOINT","useEffect","WebSocket","addEventListener","JSON","parse","data","prevMessages","outerContainer","container","ChatContainer","this","id","React","Component","compose","connect","state","authReducer","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,eAAiB,6BAA6B,UAAY,wBAAwB,SAAW,uBAAuB,KAAO,mBAAmB,MAAQ,oBAAoB,WAAa,2B,4CCQrMC,E,mJA4BEC,EAAW,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAErBC,EAAeF,EAASG,KAAI,SAACC,EAAGC,GAAJ,OAC5B,cAAC,EAAD,CAAqBC,QAASF,EAAGH,OAAQA,GAA3BI,MAElB,OAAO,8BACH,cAAC,IAAD,UACKH,OAKPK,EAAU,SAACC,GAEb,IAAIC,GAAsB,EAC1BC,EAAYF,EAAMF,QAAQK,OAC1BC,EAAaJ,EAAMP,OAQnB,OAPAY,QAAQC,IAAIJ,EAAWE,GACpBJ,EAAMP,QAELS,IAAeE,IAEfH,GAAsB,GAElBA,EAEI,qBAAKM,UAAWC,IAAIC,IAAGC,iBAAkBD,IAAGE,YAA5C,SACI,sBAAKJ,UAAWC,IAAIC,IAAGG,WAAYH,IAAGI,gBAAtC,UACKb,EAAMF,QAAQA,QACf,qBAAKgB,IAAKd,EAAMF,QAAQiB,QACxB,4BAAIf,EAAMF,QAAQkB,WAClB,4BAAIhB,EAAMF,QAAQK,cAM9B,qBAAKI,UAAWC,IAAGC,IAAGC,iBAAkBD,IAAGQ,cAA3C,SACI,sBAAKV,UAAWC,IAAGC,IAAGG,WAAYH,IAAGS,iBAArC,UACI,mBAAGX,UAAWC,IAAGC,IAAGU,YAAaV,IAAGW,WAApC,SAAiDpB,EAAMF,QAAQA,UAC/D,qBAAKgB,IAAKd,EAAMF,QAAQiB,QACxB,4BAAIf,EAAMF,QAAQkB,WAClB,4BAAIhB,EAAMF,QAAQK,eAQhCkB,EAAmB,WAErB,MAA8BC,mBAAS,IAAvC,mBAAOxB,EAAP,KAAgByB,EAAhB,KACMC,EAAc,WAChBlC,EAAGmC,KAAK3B,GACRyB,EAAW,KAEf,OAAO,uBAAMhB,UAAWmB,IAAEC,KAAnB,UACH,uBAAOpB,UAAWmB,IAAEE,MAAOC,YAAa,+DACjCC,MAAOhC,EACPiC,WAAY,SAAAC,GAAK,MAAkB,UAAdA,EAAMC,KACxBnC,EAAW0B,EAAc,MAC5BU,SAAU,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,cAAcN,UAEnD,wBAAQvB,UAAWmB,IAAEW,WACbC,QAASxC,EAAU0B,EAAc,KADzC,sBAQOe,EAlGF,SAACvC,GAEV,IAEIwC,EAFJ,EAAgClB,mBAAS,IAAzC,mBAAO9B,EAAP,KAAiBiD,EAAjB,KACMC,EAAW,+DAYjB,OAVAC,qBAAU,YACNrD,EAAI,IAAIsD,UAAUF,IACfG,iBAAiB,WAAW,SAACV,GAC3BK,EAAcM,KAAKC,MAAMZ,EAAEa,MAC5BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCT,YAIxD,CAACE,EAAUF,IAEP,qBAAKjC,UAAWmB,IAAEwB,eAAlB,SACH,sBAAK3C,UAAWmB,IAAEyB,UAAlB,UACI,qBAAK5C,UAAWmB,IAAElC,SAAlB,SACI,cAAC,EAAD,CAAUA,SAAUA,EAAUC,OAAQO,EAAMP,WAEhD,cAAC,EAAD,U,wBCvBN2D,G,mKACF,WACI,OACI,8BACI,cAAC,EAAD,CAAM3D,OAAQ4D,KAAKrD,MAAMsD,W,GAJbC,IAAMC,YAgBnBC,sBACXC,aAPkB,SAACC,GAAD,MAAY,CAE9BL,GAAIK,EAAMC,YAAYN,MAKG,IACzBO,IAFWJ,CAGbL","file":"static/js/3.d6454cb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"Chat_outerContainer__egNyA\",\"container\":\"Chat_container__1ZkaP\",\"messages\":\"Chat_messages__3OBvi\",\"form\":\"Chat_form__2rxYR\",\"input\":\"Chat_input__3rOG8\",\"sendButton\":\"Chat_sendButton__1ww_7\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './Chat.module.css';\r\nimport st from '../Dialogs/Message/Message.module.css';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport cn from \"classnames\";\r\nimport * as axios from \"axios\";\r\nimport {setAuthUserData} from \"../../Redux/auth-reducer\";\r\n\r\n\r\nlet ws;\r\n\r\nconst Chat = (props) => {\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const ENDPOINT = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\r\n    let newMessages;\r\n    useEffect(() => {\r\n        ws= new WebSocket(ENDPOINT)\r\n        ws.addEventListener('message', (e) => {\r\n             newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n\r\n        })\r\n\r\n    }, [ENDPOINT, newMessages])\r\n\r\n    return <div className={s.outerContainer}>\r\n        <div className={s.container}>\r\n            <div className={s.messages}>\r\n                <Messages messages={messages} userID={props.userID}/>\r\n            </div>\r\n            <InputMessageForm/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Messages = ({messages, userID}) => {\r\n\r\n    let chatMessages = messages.map((m, index) =>\r\n        <Message key={index} message={m} userID={userID} />);\r\n\r\n    return <div>\r\n        <ScrollToBottom>\r\n            {chatMessages}\r\n        </ScrollToBottom>\r\n    </div>\r\n}\r\n\r\nconst Message = (props) => {\r\n\r\n    let isSentByCurrentUser = false;\r\nlet messageId = props.message.userId;\r\nlet authUserId = props.userID\r\n    console.log(messageId, authUserId)\r\n    if(props.userID){\r\n\r\n    if (messageId  === authUserId){\r\n\r\n        isSentByCurrentUser = true\r\n    }}\r\n    return (isSentByCurrentUser\r\n        ? (\r\n                <div className={cn (st.messageContainer, st.justifyEnd)}>\r\n                    <div className={cn (st.messageBox, st.backgroundBlue)}>\r\n                        {props.message.message}\r\n                        <img src={props.message.photo}/>\r\n                        <p>{props.message.userName}</p>\r\n                        <p>{props.message.userId}</p>\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n        : (\r\n            <div className={cn(st.messageContainer, st.justifyStart)}>\r\n                <div className={cn(st.messageBox, st.backgroundLight)}>\r\n                    <p className={cn(st.messageText, st.colorDark)}>{props.message.message}</p>\r\n                    <img src={props.message.photo}/>\r\n                    <p>{props.message.userName}</p>\r\n                    <p>{props.message.userId}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    )\r\n}\r\n\r\nconst InputMessageForm = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const sendMessage = () => {\r\n        ws.send(message)\r\n        setMessage('')\r\n    }\r\n    return <form className={s.form}>\r\n        <input className={s.input} placeholder={\"Сообщение . . .\"}\r\n               value={message}\r\n               onKeyPress={event => event.key === 'Enter'\r\n               && message  ? sendMessage : null }\r\n               onChange={(e) => setMessage(e.currentTarget.value)}/>\r\n\r\n        <button className={s.sendButton}\r\n                onClick={message ? sendMessage : null}>\r\n            Send\r\n        </button>\r\n    </form>\r\n}\r\n\r\n\r\nexport default Chat;","import React from 'react';\r\nimport Chat from \"./Chat\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {withRouter} from \"react-router-dom\";\r\nimport Profile from \"../Profile/Profile\";\r\n\r\nclass ChatContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Chat userID={this.props.id}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nlet mapStateToProps = (state) => ({\r\n\r\n    id: state.authReducer.id\r\n\r\n\r\n});\r\nexport default compose(\r\n    connect(mapStateToProps, {    }),\r\n    withRouter,\r\n)(ChatContainer);"],"sourceRoot":""}